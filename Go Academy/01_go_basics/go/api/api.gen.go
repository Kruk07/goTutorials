// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Appearance defines model for Appearance.
type Appearance struct {
	CharacterId string `json:"character_id"`
	MovieId     string `json:"movie_id"`
}

// Character defines model for Character.
type Character struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

// Movie defines model for Movie.
type Movie struct {
	ReleaseYear int    `json:"release_year"`
	Title       string `json:"title"`
}

// DeleteCharactersParams defines parameters for DeleteCharacters.
type DeleteCharactersParams struct {
	Id string `form:"id" json:"id"`
}

// GetCharactersByMovieParams defines parameters for GetCharactersByMovie.
type GetCharactersByMovieParams struct {
	Title string `form:"title" json:"title"`
}

// DeleteMoviesParams defines parameters for DeleteMovies.
type DeleteMoviesParams struct {
	Id string `form:"id" json:"id"`
}

// GetMoviesByCharacterParams defines parameters for GetMoviesByCharacter.
type GetMoviesByCharacterParams struct {
	Name string `form:"name" json:"name"`
}

// PostAppearancesJSONRequestBody defines body for PostAppearances for application/json ContentType.
type PostAppearancesJSONRequestBody = Appearance

// PostCharactersJSONRequestBody defines body for PostCharacters for application/json ContentType.
type PostCharactersJSONRequestBody = Character

// PutCharactersJSONRequestBody defines body for PutCharacters for application/json ContentType.
type PutCharactersJSONRequestBody = Character

// PostMoviesJSONRequestBody defines body for PostMovies for application/json ContentType.
type PostMoviesJSONRequestBody = Movie

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add a character appearance in a movie
	// (POST /appearances)
	PostAppearances(ctx echo.Context) error
	// Delete a character
	// (DELETE /characters)
	DeleteCharacters(ctx echo.Context, params DeleteCharactersParams) error
	// List all characters
	// (GET /characters)
	GetCharacters(ctx echo.Context) error
	// Create a new character
	// (POST /characters)
	PostCharacters(ctx echo.Context) error
	// Update a character
	// (PUT /characters)
	PutCharacters(ctx echo.Context) error
	// Get characters by movie title
	// (GET /characters/by-movie)
	GetCharactersByMovie(ctx echo.Context, params GetCharactersByMovieParams) error
	// Delete a movie
	// (DELETE /movies)
	DeleteMovies(ctx echo.Context, params DeleteMoviesParams) error
	// List all movies
	// (GET /movies)
	GetMovies(ctx echo.Context) error
	// Create a new movie
	// (POST /movies)
	PostMovies(ctx echo.Context) error
	// Get movies by character name
	// (GET /movies/by-character)
	GetMoviesByCharacter(ctx echo.Context, params GetMoviesByCharacterParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAppearances converts echo context to params.
func (w *ServerInterfaceWrapper) PostAppearances(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAppearances(ctx)
	return err
}

// DeleteCharacters converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCharacters(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteCharactersParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCharacters(ctx, params)
	return err
}

// GetCharacters converts echo context to params.
func (w *ServerInterfaceWrapper) GetCharacters(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCharacters(ctx)
	return err
}

// PostCharacters converts echo context to params.
func (w *ServerInterfaceWrapper) PostCharacters(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCharacters(ctx)
	return err
}

// PutCharacters converts echo context to params.
func (w *ServerInterfaceWrapper) PutCharacters(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutCharacters(ctx)
	return err
}

// GetCharactersByMovie converts echo context to params.
func (w *ServerInterfaceWrapper) GetCharactersByMovie(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCharactersByMovieParams
	// ------------- Required query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, true, "title", ctx.QueryParams(), &params.Title)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter title: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCharactersByMovie(ctx, params)
	return err
}

// DeleteMovies converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMovies(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteMoviesParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteMovies(ctx, params)
	return err
}

// GetMovies converts echo context to params.
func (w *ServerInterfaceWrapper) GetMovies(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMovies(ctx)
	return err
}

// PostMovies converts echo context to params.
func (w *ServerInterfaceWrapper) PostMovies(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostMovies(ctx)
	return err
}

// GetMoviesByCharacter converts echo context to params.
func (w *ServerInterfaceWrapper) GetMoviesByCharacter(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMoviesByCharacterParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMoviesByCharacter(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/appearances", wrapper.PostAppearances)
	router.DELETE(baseURL+"/characters", wrapper.DeleteCharacters)
	router.GET(baseURL+"/characters", wrapper.GetCharacters)
	router.POST(baseURL+"/characters", wrapper.PostCharacters)
	router.PUT(baseURL+"/characters", wrapper.PutCharacters)
	router.GET(baseURL+"/characters/by-movie", wrapper.GetCharactersByMovie)
	router.DELETE(baseURL+"/movies", wrapper.DeleteMovies)
	router.GET(baseURL+"/movies", wrapper.GetMovies)
	router.POST(baseURL+"/movies", wrapper.PostMovies)
	router.GET(baseURL+"/movies/by-character", wrapper.GetMoviesByCharacter)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWUW+bPBT9K9b9vkcW6Lon3tpMqiotUl/2VFWVg28SV2C7tumEIv77ZDsJJlCSRZG2",
	"p4C51z7ncO4hWyhkpaRAYQ3kWzDFBivqL++UQqqpKNDdKS0VasvRPys2VNPCon7lzN3bRiHkYKzmYg1t",
	"ApX84Dj+sE1A43vNNTLIn/tbRY0vyb5RLt+wsG7X+b52iIihKTRXlksxCkjQCk+D8VVjJy8crOGpGkuk",
	"Bl8bpDranQuLa9Su0XJbnnFwKEv6Gw6BuDYuVtJvGHYO0MhBGnL39AgJfKA2Xgu4mWWzzEGRCgVVHHK4",
	"nWWzW0hAUbvxPFJ6eNn+Xklj3a/jSp2mjwxyeJLG3kWFgQIaey9Z420hhUXhO6lSJS98b/pmwksJ5nJX",
	"/2tcQQ7/pZ370p310sh3bV8mq2v0C0ZJYQLSr9nN4PVH1iWUMWReblNXFdWNe8wYoeRgPNKRJ1wQSrwH",
	"fU96KNqZrESLQ2G++/V5V+uk1bTC0Pi8Be5gvdeoG9h7Ebzf++ySSKNjw7wMmH8bMu9sELAeUw9IY/bO",
	"GWscedsPaHuMjg7PRmQnJTeWyBWJZOuf/8MV0LLsVSQTfjuCcH27dZlyqds6zQuNdKj53K8SSgT+6uuu",
	"6jHW9T9HOpsiXSs2QvqnX+0brT9Q6bL5Uu1j9bQD75uQwWeNVhenl0/XFGlDNNpaiwHtB7SRtcmyCWFC",
	"AiCvgF84I04Woe6vRUn4rpyIkV1Ufh4hBxZ/Eh87iT6Jjv3TqdiIjr3+9Cx234fL4iLoekZURJ+hQNlN",
	"TBH/BZoW/b7pxvwsF/mfqw9NADM1MIGdG5bum+yxtG3b/g4AAP//sc4N2aIKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
